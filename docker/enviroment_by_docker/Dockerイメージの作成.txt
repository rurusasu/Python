*dockerイメージとは*
dockerがコンテナを作成する際に参照する仮想環境の設計図

*dockerコンテナイメージの作成方法*
1.利用しているコンテナをそのままコンテナイメージにする方法.
  $docker container commit [編集したコンテナID] [保存するコンテナ名]
  <メリット>
  ・個人利用する場合は, 直感的でわかりやすい.
  <デメリット>
  ・対象のコンテナイメージを誰が作成したか分からない.
  ・対象のコンテナイメージはどういった処理が行われたイメージだか分からない.
  
2.Dockerfileをビルドしてイメージを作成する方法.
  $docker image build [OPTIONS] PATH
  上記のPATHをDockerfileのあるディレクトリに指定して実行することで, 
  DockerはDockerfileを記載順に読み取り, 実行し, コンテナイメージを作成する.
  
  ①Dockerfileを用意する
    適当なディレクトリを作成し, そこにDockerfileという名前のテキストファイルを作成する.
    
  ②ベースにするDockerイメージを決める.
  *Alpine Linux ： 軽量
  *centOS　　　 ： サーバ向け
  *Ubuntu　　　 ： デファクトスタンダード
  
  ③「docker run -it <docker-image> sh」or
    「docker run -it <docker-image> /bin/bash」でコンテナ内部で作業
  *コンテナ内部に欲しいパッケージをインストールしていく.
  *このとき, 各ツールの「y」オプションや「yes]オプションを使い, 対話なしで実行できるようにする.
  *また, ファイルの上書きなどで不慮のエラーが起きないよう「cp -f」や「ln -f」の
   ような強制オプションを付けたり, 不要なログを抑えるために「curl -s」や「wget -q」の
   利用を検討する.
  
  ④Dockerfileを編集する
  *1行ずつ, うまくいったらどこかにメモ
  *隣の開いたエディタなどにコピペ
  *設定値変更に伴うバックアップファイルの作成なども省いてよい.
  
  ⑤失敗したらいったん「exit」して再度「docker run」
  *設定値がおかしくなってしまった, クリーンな環境でやり直したい, 
   そんなときは「exit」して③からやり直す.
  *上手くいったところまでで, 一端「exit」&「docker commit」でイメージを作っておけば
   次回はそこから作業を再開できて便利.
   
  ⑥ファイルの取り込みやポートの外部公開が必要なら, オプション付きで「docker run」
  *「外からの接続を前提にしている」イメージの場合, 予めポートをホスト側に公開しておくと
   作業が捗る.
   「docker run -it -p 80:80 centos:6 /bin/bash」
  *「外部ファイルを取り込む(DockerfileでいうADD/COPY)」必要がありそうなら
   ホスト側の作業フォルダをコンテナ内部にマウントしておくと検証が進めやすい.
   「docker run -it -v $(pwd):/tmp/share centos:6 /bin/bash」
   
  ⑦全部うまくいったら「Dockerfile」にする.
  
  Dockerfile例
  # どのイメージを基にするか
  FROM centos
  
  # 作成したユーザの情報
  MAINTAINER Admin <admin@admin.com>
  
  # RUN: docker buildするときに実行される
  RUN echo "now building..."
  
  # CMD: docker runするときに実行される
  CMD echo "now running..."
  
*TensorflowをDockerイメージ内にインストールする場合*
https://www.tensorflow.org/install/install_linux→Virtualenvでインストールする
→6.から
https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.8.0-cp34-cp34m-linux_x86_64.whl 
を指定.


